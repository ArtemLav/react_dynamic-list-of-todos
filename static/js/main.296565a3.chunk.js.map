{"version":3,"sources":["components/FilterField/FilterField.jsx","shapes/TodoShape.js","components/TodoList/TodoList.jsx","components/CurrentUser/CurrentUser.jsx","api.js","App.jsx","index.js"],"names":["FilterField","PropTypes","shape","id","number","isRequired","userId","completed","bool","title","string","search","handleChange","shownTodos","shuffleTodos","className","type","name","value","onChange","autoComplete","onClick","TodoList","state","filterByAccomplishment","all","active","todo","e","target","setState","this","props","todos","selectUser","selectedUserId","filteredTodos","filter","toLowerCase","includes","map","key","classNames","checked","readOnly","Component","CurrentUser","user","setNewUser","getUser","then","newUser","phone","email","clearUser","defaultProps","fetch","response","json","result","data","App","shuffledTodos","sort","Math","random","React","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.296565a3.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nexport const FilterField = ({\n  search,\n  handleChange,\n  shownTodos,\n  shuffleTodos,\n}) => (\n  <div className=\"TodoList__filter-field\">\n    <label>\n      {`Search: `}\n      <input\n        type=\"text\"\n        name=\"search\"\n        value={search}\n        onChange={handleChange}\n        autoComplete=\"off\"\n      />\n    </label>\n\n    <select\n      value={shownTodos}\n      name=\"shownTodos\"\n      onChange={handleChange}\n    >\n      <option value=\"all\">All</option>\n      <option value=\"completed\">Completed</option>\n      <option value=\"active\">Active</option>\n    </select>\n\n    <button\n      type=\"button\"\n      className=\"button TodoList__user-button--selected\"\n      onClick={shuffleTodos}\n    >\n      Shuffle\n    </button>\n  </div>\n);\n\nFilterField.propTypes = {\n  search: PropTypes.func.isRequired,\n  handleChange: PropTypes.func.isRequired,\n  shuffleTodos: PropTypes.func.isRequired,\n  shownTodos: PropTypes.string.isRequired,\n};\n","import PropTypes from 'prop-types';\n\nexport const TodoShape = PropTypes.shape({\n  id: PropTypes.number.isRequired,\n  userId: PropTypes.number,\n  completed: PropTypes.bool,\n  title: PropTypes.string.isRequired,\n}).isRequired;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport './TodoList.scss';\nimport classNames from 'classnames';\nimport { TodoShape } from '../../shapes/TodoShape';\nimport { FilterField } from '../FilterField';\n\nexport class TodoList extends Component {\n  state = {\n    search: '',\n    shownTodos: 'all',\n  }\n\n  filterByAccomplishment = {\n    all: () => true,\n    active: todo => !todo.completed,\n    completed: todo => todo.completed,\n  }\n\n  handleChange = (e) => {\n    const { name, value } = e.target;\n\n    this.setState({\n      [name]: value,\n    });\n  }\n\n  render() {\n    const { todos, selectUser, shuffleTodos, selectedUserId } = this.props;\n    const { search, shownTodos } = this.state;\n    const { handleChange, filterByAccomplishment } = this;\n\n    const filteredTodos = todos\n      .filter(todo => todo.title.toLowerCase().includes(search.toLowerCase())\n        && filterByAccomplishment[shownTodos](todo));\n\n    return (\n      <div className=\"TodoList\">\n        <h2>Todos:</h2>\n\n        <FilterField\n          search={search}\n          handleChange={handleChange}\n          shownTodos={shownTodos}\n          shuffleTodos={shuffleTodos}\n        />\n\n        <div className=\"TodoList__list-container\">\n          <ul className=\"TodoList__list\">\n            {filteredTodos.map(({ id, userId, completed, title }) => (\n              <li\n                key={id}\n                className={classNames('TodoList__item',\n                  {\n                    'TodoList__item--unchecked': !completed,\n                    'TodoList__item--checked': completed,\n                  })}\n              >\n                <label>\n                  <input type=\"checkbox\" checked={completed} readOnly />\n                  <p>{title}</p>\n                </label>\n\n                <button\n                  className={classNames('button TodoList__user-button', {\n                    // eslint-disable-next-line max-len\n                    'TodoList__user-button--selected': userId === selectedUserId,\n                  })}\n                  type=\"button\"\n                  onClick={() => selectUser(userId)}\n                >\n                  {`UserId #${userId}`}\n                </button>\n              </li>\n            ))}\n          </ul>\n        </div>\n      </div>\n    );\n  }\n}\n\nTodoList.propTypes = {\n  todos: PropTypes.arrayOf(TodoShape).isRequired,\n  selectUser: PropTypes.func.isRequired,\n  shuffleTodos: PropTypes.func.isRequired,\n  selectedUserId: PropTypes.number.isRequired,\n};\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport './CurrentUser.scss';\n\nexport class CurrentUser extends Component {\n  state = {\n    user: {},\n  }\n\n  componentDidMount() {\n    const { userId } = this.props;\n\n    this.setNewUser(userId);\n  }\n\n  componentDidUpdate() {\n    const { userId } = this.props;\n\n    this.setNewUser(userId);\n  }\n\n  setNewUser = (id) => {\n    const { getUser } = this.props;\n\n    if (id === this.state.user.id) {\n      return;\n    }\n\n    getUser(id).then(newUser => this.setState({\n      user: newUser,\n    }));\n  }\n\n  render() {\n    const { name, id, phone, email } = this.state.user;\n    const { clearUser } = this.props;\n\n    return (\n      <div className=\"CurrentUser\">\n        <button\n          type=\"button\"\n          className=\"CurrentUser__clear\"\n          onClick={() => clearUser()}\n        >\n          Clear\n        </button>\n        <h2 className=\"CurrentUser__title\">\n          <span>{`Selected user: ${id}`}</span>\n        </h2>\n\n        <h3 className=\"CurrentUser__name\">{name}</h3>\n        <p className=\"CurrentUser__email\">{email}</p>\n        <p className=\"CurrentUser__phone\">{phone}</p>\n      </div>\n    );\n  }\n}\n\nCurrentUser.propTypes = {\n  userId: PropTypes.number,\n  getUser: PropTypes.func.isRequired,\n  clearUser: PropTypes.func.isRequired,\n};\n\nCurrentUser.defaultProps = {\n  userId: 0,\n};\n","const TODOS_URL = 'https://mate-api.herokuapp.com/todos/';\nconst USERS_URL = 'https://mate-api.herokuapp.com/users/';\n\nexport const getAllTodos = () => fetch(TODOS_URL)\n  .then(response => response.json())\n  .then(result => result.data);\n\nexport const getUser = id => fetch(`${USERS_URL}${id}`)\n  .then(response => response.json())\n  .then(result => result.data);\n","import React from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { getAllTodos, getUser } from './api';\n\nclass App extends React.Component {\n  state = {\n    todos: [],\n    selectedUserId: 0,\n  };\n\n  componentDidMount() {\n    getAllTodos().then(data => this.setState({\n      todos: data,\n    }));\n  }\n\n  selectUser = (id) => {\n    this.setState({\n      selectedUserId: id,\n    });\n  }\n\n  clearUser = () => {\n    this.setState({\n      selectedUserId: 0,\n    });\n  }\n\n  shuffleTodos = () => {\n    const { todos } = this.state;\n    const shuffledTodos = [...todos].sort(() => 0.5 - Math.random());\n\n    this.setState({\n      todos: shuffledTodos,\n    });\n  }\n\n  render() {\n    const { todos, selectedUserId } = this.state;\n    const { selectUser, clearUser, shuffleTodos } = this;\n\n    return (\n      <div className=\"App\">\n        <div className=\"App__sidebar\">\n          <TodoList\n            todos={todos}\n            selectUser={selectUser}\n            shuffleTodos={shuffleTodos}\n            selectedUserId={selectedUserId}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          <div className=\"App__content-container\">\n            {selectedUserId ? (\n              <CurrentUser\n                userId={selectedUserId}\n                getUser={getUser}\n                clearUser={clearUser}\n              />\n            ) : 'No user selected'}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}