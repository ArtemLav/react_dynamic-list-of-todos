{"version":3,"sources":["components/SearchField/SearchField.jsx","shapes/TodoShape.js","components/SelectTodos/SelectTodos.jsx","components/Button/Button.jsx","components/FilterField/FilterField.jsx","components/TodoItem/TodoItem.jsx","components/TodoList/TodoList.jsx","components/CurrentUser/CurrentUser.jsx","api.js","App.jsx","index.js"],"names":["SearchField","PropTypes","shape","id","number","isRequired","userId","completed","bool","title","string","search","handleChange","type","name","value","onChange","autoComplete","SelectTodos","shownTodos","Button","shuffleTodos","className","onClick","FilterField","TodoItem","selectedUserId","selectUser","checked","readOnly","classNames","defaultProps","TodoList","state","filterByAccomplishment","all","active","todo","e","target","setState","this","props","todos","filteredTodos","filter","todoString","toLowerCase","searchString","includes","map","key","Component","CurrentUser","user","setNewUser","newId","getUser","clearUser","then","newUser","phone","email","fetch","response","json","result","data","App","shuffledTodos","i","length","j","Math","floor","random","React","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.46b2b8f5.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nexport const SearchField = ({ search, handleChange }) => (\n  <label>\n    {`Search: `}\n    <input\n      type=\"text\"\n      name=\"search\"\n      value={search}\n      onChange={handleChange}\n      autoComplete=\"off\"\n    />\n  </label>\n);\n\nSearchField.propTypes = {\n  search: PropTypes.string.isRequired,\n  handleChange: PropTypes.func.isRequired,\n};\n","import PropTypes from 'prop-types';\n\nexport const TodoShape = PropTypes.shape({\n  id: PropTypes.number.isRequired,\n  userId: PropTypes.number,\n  completed: PropTypes.bool,\n  title: PropTypes.string.isRequired,\n}).isRequired;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nexport const SelectTodos = ({ handleChange, shownTodos }) => (\n  <select\n    value={shownTodos}\n    name=\"shownTodos\"\n    onChange={handleChange}\n  >\n    <option value=\"all\">All</option>\n    <option value=\"completed\">Completed</option>\n    <option value=\"active\">Active</option>\n  </select>\n);\n\nSelectTodos.propTypes = {\n  handleChange: PropTypes.func.isRequired,\n  shownTodos: PropTypes.string.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nexport const Button = ({ shuffleTodos }) => (\n  <button\n    type=\"button\"\n    className=\"button TodoList__user-button--selected\"\n    onClick={shuffleTodos}\n  >\n    Shuffle\n  </button>\n);\n\nButton.propTypes = {\n  shuffleTodos: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { SearchField } from '../SearchField';\nimport { SelectTodos } from '../SelectTodos';\nimport { Button } from '../Button';\n\nexport const FilterField = ({\n  search,\n  handleChange,\n  shownTodos,\n  shuffleTodos,\n}) => (\n  <div className=\"TodoList__filter-field\">\n    <SearchField\n      search={search}\n      handleChange={handleChange}\n    />\n\n    <SelectTodos\n      handleChange={handleChange}\n      shownTodos={shownTodos}\n    />\n\n    <Button\n      shuffleTodos={shuffleTodos}\n    />\n  </div>\n);\n\nFilterField.propTypes = {\n  search: PropTypes.string.isRequired,\n  handleChange: PropTypes.func.isRequired,\n  shuffleTodos: PropTypes.func.isRequired,\n  shownTodos: PropTypes.string.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\n\nexport const TodoItem = ({\n  userId,\n  completed,\n  title,\n  selectedUserId,\n  selectUser,\n}) => (\n  <>\n    <label>\n      <input type=\"checkbox\" checked={completed} readOnly />\n      <p>{title}</p>\n    </label>\n\n    <button\n      className={classNames('button TodoList__user-button', {\n        'TodoList__user-button--selected': (\n          userId === selectedUserId\n        ),\n      })}\n      type=\"button\"\n      onClick={() => selectUser(userId)}\n    >\n      {`UserId #${userId}`}\n    </button>\n  </>\n);\n\nTodoItem.propTypes = {\n  userId: PropTypes.number,\n  completed: PropTypes.bool,\n  title: PropTypes.string.isRequired,\n  selectedUserId: PropTypes.number.isRequired,\n  selectUser: PropTypes.func.isRequired,\n};\n\nTodoItem.defaultProps = {\n  userId: 0,\n  completed: false,\n};\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport './TodoList.scss';\nimport classNames from 'classnames';\nimport { TodoShape } from '../../shapes/TodoShape';\nimport { FilterField } from '../FilterField';\nimport { TodoItem } from '../TodoItem';\n\nexport class TodoList extends Component {\n  state = {\n    search: '',\n    shownTodos: 'all',\n  }\n\n  filterByAccomplishment = {\n    all: () => true,\n    active: todo => !todo.completed,\n    completed: todo => todo.completed,\n  }\n\n  handleChange = (e) => {\n    const { name, value } = e.target;\n\n    this.setState({\n      [name]: value,\n    });\n  }\n\n  render() {\n    const { todos, selectUser, shuffleTodos, selectedUserId } = this.props;\n    const { search, shownTodos } = this.state;\n\n    const filteredTodos = todos\n      .filter((todo) => {\n        const todoString = todo.title.toLowerCase();\n        const searchString = search.toLowerCase();\n\n        return (todoString.includes(searchString)\n          && this.filterByAccomplishment[shownTodos](todo));\n      });\n\n    return (\n      <div className=\"TodoList\">\n        <h2>Todos:</h2>\n\n        <FilterField\n          search={search}\n          handleChange={this.handleChange}\n          shownTodos={shownTodos}\n          shuffleTodos={shuffleTodos}\n        />\n\n        <div className=\"TodoList__list-container\">\n          <ul className=\"TodoList__list\">\n            {filteredTodos.map(({ id, userId, completed, title }) => (\n              <li\n                key={id}\n                className={classNames('TodoList__item', {\n                  'TodoList__item--unchecked': !completed,\n                  'TodoList__item--checked': completed,\n                })}\n              >\n                <TodoItem\n                  userId={userId}\n                  completed={completed}\n                  title={title}\n                  selectedUserId={selectedUserId}\n                  selectUser={() => selectUser(userId)}\n                />\n              </li>\n            ))}\n          </ul>\n        </div>\n      </div>\n    );\n  }\n}\n\nTodoList.propTypes = {\n  todos: PropTypes.arrayOf(TodoShape).isRequired,\n  selectUser: PropTypes.func.isRequired,\n  shuffleTodos: PropTypes.func.isRequired,\n  selectedUserId: PropTypes.number.isRequired,\n};\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport './CurrentUser.scss';\n\nexport class CurrentUser extends Component {\n  state = {\n    user: {},\n  }\n\n  componentDidMount() {\n    const { userId } = this.props;\n\n    this.setNewUser(userId);\n  }\n\n  componentDidUpdate() {\n    const { userId } = this.props;\n    const { id } = this.state.user;\n\n    if (userId !== id) {\n      this.setNewUser(userId);\n    }\n  }\n\n  setNewUser = (newId) => {\n    const { getUser, clearUser } = this.props;\n    const { id } = this.state.user;\n\n    if (newId === id) {\n      return;\n    }\n\n    getUser(newId).then((newUser) => {\n      if (!newUser) {\n        clearUser();\n      } else {\n        this.setState({\n          user: newUser,\n        });\n      }\n    });\n  }\n\n  render() {\n    const { name, id, phone, email } = this.state.user;\n    const { clearUser } = this.props;\n\n    return (\n      <div className=\"CurrentUser\">\n        <button\n          type=\"button\"\n          className=\"CurrentUser__clear\"\n          onClick={clearUser}\n        >\n          Clear\n        </button>\n        <h2 className=\"CurrentUser__title\">\n          <span>{`Selected user: ${id}`}</span>\n        </h2>\n\n        <h3 className=\"CurrentUser__name\">{name}</h3>\n        <p className=\"CurrentUser__email\">{email}</p>\n        <p className=\"CurrentUser__phone\">{phone}</p>\n      </div>\n    );\n  }\n}\n\nCurrentUser.propTypes = {\n  userId: PropTypes.number,\n  getUser: PropTypes.func.isRequired,\n  clearUser: PropTypes.func.isRequired,\n};\n\nCurrentUser.defaultProps = {\n  userId: 0,\n};\n","const TODOS_URL = 'https://mate-api.herokuapp.com/todos/';\nconst USERS_URL = 'https://mate-api.herokuapp.com/users/';\n\nexport const getAllTodos = () => fetch(TODOS_URL)\n  .then(response => response.json())\n  .then(result => result.data);\n\nexport const getUser = id => fetch(`${USERS_URL}${id}`)\n  .then(response => response.json())\n  .then(result => result.data);\n","import React from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { getAllTodos, getUser } from './api';\n\nclass App extends React.Component {\n  state = {\n    todos: [],\n    selectedUserId: 0,\n  };\n\n  componentDidMount() {\n    getAllTodos()\n      .then(data => data.filter(({ id, title }) => id && title))\n      .then(todos => this.setState({\n        todos,\n      }));\n  }\n\n  selectUser = (id) => {\n    this.setState({\n      selectedUserId: id,\n    });\n  }\n\n  clearUser = () => {\n    this.setState({\n      selectedUserId: 0,\n    });\n  }\n\n  shuffleTodos = () => {\n    const { todos } = this.state;\n    const shuffledTodos = [...todos];\n\n    for (let i = shuffledTodos.length - 1; i > 0; i -= 1) {\n      const j = Math.floor(Math.random() * (i + 1));\n\n      [\n        shuffledTodos[i],\n        shuffledTodos[j],\n      ] = [\n        shuffledTodos[j],\n        shuffledTodos[i],\n      ];\n    }\n\n    this.setState({\n      todos: shuffledTodos,\n    });\n  }\n\n  render() {\n    const { todos, selectedUserId } = this.state;\n    const { selectUser, clearUser, shuffleTodos } = this;\n\n    return (\n      <div className=\"App\">\n        <div className=\"App__sidebar\">\n          <TodoList\n            todos={todos}\n            selectUser={selectUser}\n            shuffleTodos={shuffleTodos}\n            selectedUserId={selectedUserId}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          <div className=\"App__content-container\">\n            {selectedUserId ? (\n              <CurrentUser\n                userId={selectedUserId}\n                getUser={getUser}\n                clearUser={clearUser}\n              />\n            ) : 'No user selected'}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}